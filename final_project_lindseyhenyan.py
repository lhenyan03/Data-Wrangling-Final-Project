# -*- coding: utf-8 -*-
"""Final Project -LindseyHenyan

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10VnSrGQvOQl0efzGJgZ2bx-jXqTEC6UR

# DS 2500 â€“ Final Project: Book Sales and GoodReads Rating

---
*NOTE: My final project proposal asks a different question and uses different data sets, however after further inspection the data sets were incomplete and not usable. I got permission to switch my project from Professor Marina Kogan.



Lindsey Henyan
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sb
from scipy import stats
from scipy.stats import ttest_ind
import statsmodels.formula.api as smf
from scipy.stats import f_oneway

"""#Formulate your questions

What is the relationship between the average rating of books, considering factors such as authors, publication date, language, copies sold, and ratings count?

#Read in your data

Github Repos [Best-Selling Books and GoodReads Ratings](https://github.com/harsh1399/DS2500-Data_Wrangling/tree/main/Module_Assignment-3/Book_sales_and_Goodreads_ratings).
"""

books_df = pd.read_csv('https://raw.githubusercontent.com/harsh1399/DS2500-Data_Wrangling/main/Module_Assignment-3/Book_sales_and_Goodreads_ratings/combining-3-books.csv',
                           usecols = ['title', 'author', 'language', 'year', 'copiesSold', 'genre'])
goodreads_df = pd.read_csv('https://raw.githubusercontent.com/harsh1399/DS2500-Data_Wrangling/main/Module_Assignment-3/Book_sales_and_Goodreads_ratings/combining-3-goodreads.csv',
                           usecols = ['bookID','title','authors','average_rating','isbn','isbn13','language_code','  num_pages','ratings_count','text_reviews_count','publication_date','publisher'])

"""#Check the packaging"""

books_df.shape

goodreads_df.shape

"""#Look at the top and bottom of data"""

books_df.head()

goodreads_df.head()

books_df.tail()

goodreads_df.tail()

"""#Join The Data Sets

Check the similarities between columns
"""

set(books_df.columns) & set(goodreads_df.columns)

"There are {0:,} unique values in the 'books_df'".format(len(books_df['title'].unique()))

"There are {0:,} unique values in the 'goodreads_df'".format(len(goodreads_df['title'].unique()))

in_books_but_not_goodreads_set = set(books_df['title']) - set(goodreads_df['title'])
in_goodreads_but_not_books_set = set(goodreads_df['title']) - set(books_df['title'])

print("There are {0:,} \"title\"s in books_df but not in goodreads_df.".format(len(in_books_but_not_goodreads_set)))
print("There are {0:,} \"title\"s in goodreads_df but not in books_df.".format(len(in_goodreads_but_not_books_set)))

"""Check for duplicates."""

books_df['title'].value_counts().head()

goodreads_df['title'].value_counts().head()

"""Join the data sets using inner join"""

reading_inner_df = pd.merge(left = books_df,
                                  right = goodreads_df,
                                  left_on = 'title',
                                  right_on = 'title',
                                  how='inner')

"""Check shape"""

print("There are {0:,} rows and {1:,} columns.".format(*reading_inner_df.shape))

"""Test for duplicates and unique variables to make sure the two sets joined correctly."""

print("There are {:,} unique values.".format(len(reading_inner_df['title'].unique())))
print(reading_inner_df['title'].value_counts().head())

"""# Clean the Data : Mean
Ordering the columns with missing data from greatest to least.

"""

reading_inner_df.head()

reading_inner_df.isnull().sum().sort_values(ascending=False)

"""Drop the genre column because there was 54 missing entires."""

reading_inner_df.drop('genre', axis=1, inplace=True)

"""Turn copies sold and number of pages into an integer, and average rating into a float."""

def convert_to_integer(value_str):
    try:
        # Extract the numerical part and convert it to an integer
        numerical_part = value_str.split()[0]
        integer_value = int(numerical_part) * 1000000
        return integer_value
    except (ValueError, IndexError):
        return None

reading_inner_df['copiesSold'] = reading_inner_df['copiesSold'].apply(convert_to_integer)
reading_inner_df['  num_pages'] = reading_inner_df['  num_pages'].astype(int)
reading_inner_df['average_rating'] = reading_inner_df['average_rating'].astype(float)

"""Rename num_pages to remove the spaces"""

reading_inner_df = reading_inner_df.rename(columns={'  num_pages': 'num_pages'})

"""#Check the "n"s

Checking if the ratings, sales, of best-selling books make sense.
"""

print("Min: " + str(reading_inner_df['average_rating'].min()))
print("Max: " + str(reading_inner_df['average_rating'].max()))

print("Min: " + str(reading_inner_df['copiesSold'].min()))
print("Max: " + str(reading_inner_df['copiesSold'].max()))

print("Min: " + str(reading_inner_df['publication_date'].min()))
print("Max: " + str(reading_inner_df['publication_date'].max()))

"""#Validate against an external data source




Does the books listed in the best-selling list make sense?
"""

reading_inner_df['title'].value_counts().head(15)

"""After reviewing the list of best-selling books, the data seems correct since the books listed are quite popular among various age groups as well as being within mainstream media.

#Make a plot
"""

sb.scatterplot(x=reading_inner_df['year'], y=reading_inner_df['average_rating'])
plt.xlabel('Year')
plt.ylabel('Average Ratings')
plt.title('Published Year vs Average Rating for best-selling books')

sb.scatterplot(x=reading_inner_df['copiesSold'], y=reading_inner_df['average_rating'])
plt.xlabel('Copies Sold')
plt.ylabel('Average Ratings')
plt.title('Copies Sold vs Average Rating for best-selling books')

sb.scatterplot(x=reading_inner_df['num_pages'], y=reading_inner_df['average_rating'])
plt.xlabel('Number of Pages')
plt.ylabel('Average Ratings')
plt.title('Number of Pages vs Average Rating for best-selling books')

"""Check Author's Distribution"""

author_counts = reading_inner_df['author'].value_counts()

# Select the top 20 authors based on book count
top_authors = author_counts.head(20)

# Create a histogram for the top 20 authors
plt.figure(figsize=(10, 6))
top_authors.plot(kind='bar', color='skyblue')
plt.xlabel('Author')
plt.ylabel('Number of Books')
plt.title('Top 20 Authors by Number of Books')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Calculate average rating per author
avg_rating_per_author = reading_inner_df.groupby('author')['average_rating'].mean()

# Plotting
plt.figure(figsize=(10, 6))
plt.hist(avg_rating_per_author, bins=10, edgecolor='black')
plt.xlabel('Average Rating')
plt.ylabel('Frequency')
plt.title('Histogram of Average Rating per Author')
plt.show()

"""Heat Map with the Quantitative Variables"""

books_corr =  reading_inner_df[['copiesSold','average_rating','num_pages','ratings_count', 'year']].corr()

books_mask = np.zeros_like(books_corr)
books_mask[np.triu_indices_from(books_mask)] = True

# Set up the plotting environment
f,ax = plt.subplots(1,1,figsize=(8,8))

# Make a heatmap
sb.heatmap(books_corr,vmin=-1,vmax=1,mask=books_mask,annot=True,square=True,ax=ax,cmap='coolwarm_r')

"""Look at the spread of different publishers"""

gatsby_df = reading_inner_df.loc[reading_inner_df['title'] == "The Great Gatsby"]
gatsby_df

author_counts = reading_inner_df['publisher'].value_counts()

# Select the top 20 authors based on book count
top_authors = author_counts.head(20)

# Create a histogram for the top 20 authors
plt.figure(figsize=(10, 6))
top_authors.plot(kind='bar', color='skyblue')
plt.xlabel('Publisher')
plt.ylabel('Number of Books')
plt.title('Top 20 Publishers by Number of Books')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""# Statistical Test

Regression Model with Quantitative Variables
"""

m0 = smf.ols(formula = 'average_rating ~ copiesSold + num_pages + ratings_count + year + ratings_count',data=reading_inner_df).fit()
m0.summary()

"""Regression Model With Authors"""

m1 = smf.ols(formula = 'average_rating ~ copiesSold + num_pages + ratings_count + year + ratings_count + author',data=reading_inner_df).fit()
m1.summary()

"""ANOVA TEST: Author and Average Rating"""

grouped_data = [reading_inner_df[reading_inner_df['author'] == author]['average_rating'] for author in reading_inner_df['author'].unique()]

# Perform ANOVA test
f_statistic, p_value = f_oneway(*grouped_data)

# Print results
print(f"ANOVA F-Statistic: {f_statistic}")
print(f"ANOVA p-value: {p_value}")